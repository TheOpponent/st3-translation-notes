# This script takes an uncompressed ADCG file with a matching PNG file,
# as generated by decode_adcg.py, and reconstructs the ADCG file with the edited
# PNG file. 
# 
# To create the PVR textures from the PNG file, an external tool is required.
# The default arguments below are for DOSPVR, which is not included.
#
# The output file with the extension .out is to be pasted into the address
# of the original ADCG data, overwriting the original compressed chunk.
# Overwrite any leftover compressed data from the original ADCG chunk with byte 00.
# The original ADCG archive should have the same file size after replacing data.

import os
import struct
import subprocess
import sys
from PIL import Image
from utils import prs

path = os.path.realpath(os.path.dirname(sys.argv[0]))

# Set these to the path and arguments of a utility that accepts a PVR file and output a PNG file.
# It is recommended that the arguments include a switch that suppresses console output, if available.
png2pvr_path = os.path.join(path,os.path.normpath(r".\lib\dospvr.exe"))
png2pvr_args = [png2pvr_path,"-q","-tw","-cf","4444","~temp.png","-of","~temp.pvr"]

def encode_adcg(input_adcg,input_png,texture_size=64):

    texture_data = bytearray()

    # Split input image into tiles according to ADCG header properties.
    with open(input_adcg,"rb") as adcg:
        adcg_header = adcg.read(32)
        textures_num = struct.unpack("<I",adcg_header[12:16])[0]
        adcg_header += adcg.read(textures_num * 16)

    # Get crop coordinates.
    crop_boxes = []
    
    for i in range(textures_num):
        subtexture_header = adcg_header[32:][i*16:(i+1)*16]
        box_x = struct.unpack("<H",subtexture_header[8:10])[0]
        box_y = struct.unpack("<H",subtexture_header[10:12])[0]
        crop_boxes.append((box_x, box_y, box_x + texture_size, box_y + texture_size))

    # Create temporary PVR texture and add texture data to bytearray.
    with Image.open(input_png) as im:
        for i in crop_boxes:
            im.crop(i).save("~temp.png")

            subprocess.run(png2pvr_args,shell=True)

            with open("~temp.pvr","rb") as pvr:
                pvr.seek(16)
                texture_data += pvr.read()

            # DOSPVR does not overwrite the output file by default, so it must be deleted after each run.
            os.remove("~temp.pvr")

    output_data = bytes(prs.compress(adcg_header + texture_data))

    with open(input_png + ".adcg.out","wb") as output_file:
        output_file.write(output_data + b'EOFC\x00\x00\x00\x00')
        print(f"{output_file.name}: Wrote {len(output_data)} bytes.")


def main():
    if len(sys.argv) > 1:
        for i in sys.argv[1:]:
            if os.path.isfile(input_png := os.path.splitext(i)[0] + ".png"):
                encode_adcg(i,input_png)
            else:
                print(f"{i}: Matching PNG file not found.")
    else:
        print("Specify input ADCG file(s).")


if __name__ == "__main__":
    main()
